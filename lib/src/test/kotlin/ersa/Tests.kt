/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package ersa

import io.ktor.client.call.body
import io.ktor.http.HttpStatusCode
import kotlinx.coroutines.test.runTest
import kotlinx.serialization.json.Json
import kotlin.test.Test
import kotlinx.serialization.json.JsonObject
import kotlinx.serialization.json.decodeFromJsonElement
import kotlin.test.assertEquals

class Tests {
    @Test
    fun testHttpGetParams() = runTest {
        val classUnderTest = Courrier(_host = "httpbin.org")
        val endpoint = Endpoint("/get", queryItems = listOf(QueryItem("radius", 1000)))
        val response = classUnderTest.request(endpoint, method = Method.GET)
        val body = Json.decodeFromString<JsonObject>(response.body())
        val headers = Json.decodeFromString<JsonObject>(body["args"].toString())

        assertEquals(HttpStatusCode.OK, response.status)
        assertEquals("1000", headers["radius"]?.let { Json.decodeFromJsonElement(it) })
    }

    @Test
    fun testHttpPut() = runTest {
        val classUnderTest = Courrier(_host = "httpbin.org")
        val endpoint = Endpoint("/put")
        val response = classUnderTest.request(endpoint, method = Method.PUT)

        assertEquals(HttpStatusCode.OK, response.status)
    }
    @Test
    fun testGetFields() = runTest {
        val classUnderTest = Courrier(_host = "api.olympsis.com")
        val endpoint = Endpoint(path = "/fields", queryItems = listOf(
            QueryItem("longitude", "-111.871772"),
            QueryItem("latitude", "40.779892"),
            QueryItem("radius", "160000"),
            QueryItem("sports", "soccer,golf")
        ))
        val response = classUnderTest.request(endpoint, method = Method.GET)
        val bodyString: String = response.body()
        val headers = response.headers
        println(headers)
        println(bodyString)

        assertEquals(HttpStatusCode.OK, response.status)
    }
    @Test
    fun testUpload() = runTest {
        val classUnderTest = Courrier(_host = "httpbin.org")
        val endpoint = Endpoint("/post")
        val fileName = "testfile.jpeg"
        val response = classUnderTest.upload(endpoint, fileName = fileName, fileType = FileType.JPEG, data = "")
        val body = Json.decodeFromString<JsonObject>(response.body())
        val headers = Json.decodeFromString<JsonObject>(body["headers"].toString())

        assertEquals(HttpStatusCode.OK, response.status)
        assertEquals(fileName, headers["X-Filename"]?.let { Json.decodeFromJsonElement(it) })
        assertEquals("image/jpeg", headers["Content-Type"]?.let { Json.decodeFromJsonElement(it) })
        assertEquals("ersa", headers["User-Agent"]?.let { Json.decodeFromJsonElement(it) })
    }
}
